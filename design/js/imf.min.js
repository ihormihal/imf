(function($) {

	$.fn.imGmapSingle = function(options) {

		var that = this;
		var settings = $.extend({
			point: false, //for single ("50.4503,30.5235")
			zoom: 5,
			scroll: false,
			type: 'ROADMAP',
			marker: 'design/img/pin.svg',
			animation: false
		}, options);

		$(that).each(function(index, container){
			var gmap = {};

			gmap.settings = {};

			//extend settings
			var thatData = $(container).data();
			for(var i in settings){
				if(thatData.hasOwnProperty(i)){
					gmap.settings[i] = thatData[i];
				}else{
					gmap.settings[i] = settings[i];
				}
			}

			var location = gmap.settings.point.split(',');
			gmap.latlng = new google.maps.LatLng(parseFloat(location[0].trim()), parseFloat(location[1].trim()));

			gmap.mapOptions = {
				center: gmap.latlng,
				zoom: parseInt(gmap.settings.zoom),
				zoomControl: true,
				mapTypeControl: false,
				streetViewControl: false,
				scrollwheel: gmap.settings.scroll,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			};

			gmap.map = new google.maps.Map(container, gmap.mapOptions);

			gmap.marker = new google.maps.Marker({
				position: gmap.latlng,
				map: gmap.map,
				icon: gmap.settings.marker
			});


		});

	};

	$.fn.imGmapMultiple = function(options) {
		if(this.length == 0) return false;
		var that = this[0];
		var settings = $.extend({
			zoom: 5,
			scroll: false,
			type: 'ROADMAP',
			marker: 'design/img/pin.svg',
			animation: false,
			pointsUrl: false,
			windowUrl: false
		}, options);


		var gmap = {};

		gmap.points = [];
		gmap.markers = [];
		gmap.settings = {};

		//extend settings
		var thatData = $(that).data();
		for(var i in settings){
			if(thatData.hasOwnProperty(i)){
				gmap.settings[i] = thatData[i];
			}else{
				gmap.settings[i] = settings[i];
			}
		}

		gmap.mapOptions = {
			zoom: parseInt(gmap.settings.zoom),
			zoomControl: true,
			mapTypeControl: false,
			streetViewControl: false,
			scrollwheel: gmap.settings.scroll,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		};


		if(gmap.settings.type == 'SATELLITE'){
			gmap.mapOptions.mapTypeId = google.maps.MapTypeId.SATELLITE;
		}else if(gmap.settings.type == 'HYBRID'){
			gmap.mapOptions.mapTypeId = google.maps.MapTypeId.HYBRID;
		}else if(gmap.settings.type == 'TERRAIN'){
			gmap.mapOptions.mapTypeId = google.maps.MapTypeId.TERRAIN;
		}

		gmap.markerOptions = {
			position: null,
			map: null,
			icon: gmap.settings.marker,
			animation: (gmap.settings.animation ? google.maps.Animation.DROP : false)
		};
		
		gmap.loadPoints = function(url, data){
			$.ajax({
				url: url,
				data: data
			}).done(function(res){
				if(res.status == 'success'){
					gmap.points = res.data;
					gmap.placePoints();
				}
			});
		};

		//initial points
		if(gmap.settings.pointsUrl){
			gmap.loadPoints(gmap.settings.pointsUrl);
		}else if(gmap.settings.point){
			gmap.points = $.parseJSON($(that).html().trim());
		}

		gmap.map = new google.maps.Map(that, gmap.mapOptions);
		gmap.infowindow = new google.maps.InfoWindow();


		gmap.placePoints = function(){
			gmap.bounds = new google.maps.LatLngBounds();
			for(var i = 0; i < gmap.markers.length; i++){
				gmap.markers[i].setMap(null);
			}
			gmap.markers = [];
			for (var i = 0; i < gmap.points.length; i++) {
				if(gmap.points[i]){

					var options = gmap.markerOptions;
					options.position = new google.maps.LatLng(parseFloat(gmap.points[i].lat), parseFloat(gmap.points[i].lng));
					options.map = gmap.map;
					options.id = gmap.points[i].id;

					var marker = new google.maps.Marker(options);

					gmap.markers.push(marker);
					if(gmap.settings.windowUrl){
						google.maps.event.addListener(marker,'click',function(){
							loadInfoWindow(that);
						});
					}
					gmap.bounds.extend(marker.position);
				}
			}
			gmap.map.fitBounds(this.bounds);

			if(gmap.markers.length == 0){
				gmap.map.setZoom(1);
			}
			if(gmap.markers.length == 1){
				gmap.map.setZoom(gmap.mapOptions.zoom);
			}
		}

		gmap.placePoints();
		
		function loadInfoWindow(marker){
			$.ajax({
				url: gmap.settings.windowUrl,
				data: {id: marker.id}
			}).done(function(data){
				gmap.infowindow.close();
				gmap.infowindow.setContent(data);
				gmap.infowindow.open(gmap.map,marker);
			});
		}

		return gmap;


	};

})(jQuery);

/*
 * Universal Single-Layer Parallax
 * parallax - v0.1.2 - 2016-10-20
 * https://github.com/ihormihal/IM-Framework
 * http://mycode.in.ua
 * Copyright 2017 Ihor Mykhalchenko
 */


(function($) {
	$.fn.imParallax = function(options){
		var settings = $.extend({
			speed: 0.8, // 0 -> 1 : slowly, 1 -> 2 : faster
			minWidth : 992
		}, options);

		var that = this;

		var needReload = true;

		var main = function(){

			$('.parallax-image').remove();

			if($(window).width() < settings.minWidth){
				$(that).each(function(index,element){
					var src = element.getAttribute('data-image');
					element.style.backgroundImage = 'url('+src+')';
				});
			}else{
				$(that).each(function(index,element){
					var item = {};
					element.style.backgroundImage = '';
					var thisSpeed = settings.speed;

					var src = element.getAttribute('data-image');
					var speed = element.getAttribute('data-speed');

					if(speed){
						speed = Math.abs(parseFloat(speed));
						if(speed > 2){
							console.log('Too mutch speed for parallax (use 0...2)!'); //default value used
						}else if(speed == 1){
							return false; //no sense run parallax
						}else{
							thisSpeed = speed;
						}
					}

					var prallaxHeight = element.offsetHeight; //container height
					var prallaxTop = $(element).offset().top; //page top -> container

					item.parallax = document.createElement('div');
					item.parallax.className = "parallax-image";
					item.parallax.style.height = prallaxHeight + 'px';

					item.image = document.createElement('img');
					item.image.src = src;

					item.parallax.appendChild(item.image);

					document.body.appendChild(item.parallax);


					var moveImage = function() {
						var scrTop = $(window).scrollTop(); //scrolling position document top -> window top
						var scrBottom = scrTop + $(window).innerHeight(); //scrolling position document top -> window bottom
						var origin = prallaxTop - scrTop;

						var originScroll = 'translate3d(0, '+ origin +'px, 0)';
						var parallaxScroll = 'translate3d(0, '+  parseInt(origin*(thisSpeed-1)) +'px, 0)';


						var topBorderVisible = false; //image top edge visibility
						var bottomBorderVisible = false; //image bottom edge visibility

						var fixOffset = 100; //scroll step in Chrome

						if(prallaxTop > (scrTop - fixOffset) && prallaxTop < (scrBottom + fixOffset)){
							topBorderVisible = true;
						}
						if(prallaxTop + prallaxHeight > (scrTop - fixOffset) && prallaxTop + prallaxHeight < (scrBottom + fixOffset)){
							bottomBorderVisible = true;
						}

						//run if only parallax is visible
						if(topBorderVisible || bottomBorderVisible || needReload){
							item.parallax.style.display = 'block';
							item.parallax.style.transform = originScroll;
							item.parallax.style['-webkit-transform'] = originScroll;
							item.image.style.transform = parallaxScroll;
							item.image.style['-webkit-transform'] = parallaxScroll;
						}else{
							item.parallax.style.display = 'none';
						}

					};

					moveImage();

					$(window).scroll(function() {
						moveImage();
					});
				});
			}

			needReload = false;
		};

		main();

		$(window).resize(function() {
			console.log('resize');
			needReload = true;
			main();
		});
	};
})(jQuery);
/*
 * OWL-Carousel 2 wrapper
 * v0.1.0 - 2017-02-20
 * https://github.com/ihormihal/IM-Framework
 * http://mycode.in.ua
 * Copyright 2017 Ihor Mykhalchenko
 */

(function($) {


	$.fn.imOwlCarousel = function(options){

		var settings = $.extend({
			type: 'carousel'
		}, options);


		$(this).each(function(){
			var el = $(this);
			var params = {
				loop: el.data('loop') == true ? true : false,
				nav : el.data('nav') == true ? true : false,
				dots: el.data('pag') == true ? true : false,
				autoplay: el.data('auto') == true ? true : false,
				slideBy: el.data('page') == true ? 'page' : 1,
				margin: el.data('margin') ? parseInt(el.data('margin')) : 0,
				autoplayTimeout: el.data('speed') ? parseInt(el.data('speed')) : 5000,
				navText: ['<i class="fa fa-angle-left">', '<i class="fa fa-angle-right">']
			};
			if(settings.type == 'carousel'){
				params.responsive = {
					0: { items: parseInt(el.data('xs')) || 1 },
					361: { items: parseInt(el.data('sm')) || 2 },
					769: { items: parseInt(el.data('md')) || 3 },
					1008: { items: parseInt(el.data('lg')) || 4 },
					1265: { items: parseInt(el.data('xl')) || 5 }
				};
			}else if(settings.type == 'slider'){
				params.items = 1;
				el.on('translate.owl.carousel', function(event) {
					var currentIndex = event.item.index;
					var slides = el.find('.owl-item');
					slides.each(function(index){
						if(index !== event.item.index){
							$(this).find('.animated').each(function(){
								$(this).removeClass($(this).data('animated'));
							});
						}
					});
					slides.eq(currentIndex).find('.animated').each(function(){
						$(this).addClass($(this).data('animated'));
					});
				});
			}
			el.owlCarousel(params);
		});

		//OWL Carousel custom nav
		$('.owl-custom-nav').on('click', '.owl-prev, .owl-next', function(){
			var target = $(this).parent('.owl-custom-nav').data('target');
			var owl = $(target).data('owlCarousel');
			if($(this).hasClass('owl-prev')){
				owl.prev();
			}else if($(this).hasClass('owl-next')){
				owl.next();
			}
		});

	};
})(jQuery);
/*
 * Select autocomplete plugin
 * v0.1.0 - 2017-02-20
 * https://github.com/ihormihal/IM-Framework
 * http://mycode.in.ua
 * Copyright 2017 Ihor Mykhalchenko
 */

(function($) {
    $.fn.imSelect = function(options){
        var settings = $.extend({

        }, options);

        var that = this;

        $(document).on('click', function(event){
            $('.dropdown.multiselect.focus').removeClass('focus');
            var focused = $(event.target).parents('.dropdown.multiselect');
            if(!focused.length){
                $('.dropdown.multiselect').removeClass('active');
            }else{
                focused.addClass('focus');
                $('.dropdown.multiselect').not('.focus').removeClass('active');
            }
        });

        var Dropdown = function(el){
            var that = this;
            that.el = el;
            that.show = function(){
                that.el.addClass('active');
            };
            that.hide = function(){
                that.el.removeClass('active');
            };
            that.isVisible = function(){
                return that.el.hasClass('active');
            };
        };

        var Input = function(el) {
            var that = this;
            that.el = el;
            that.setValue = function(value){
                that.el.val(value.value);

            };
            that.setValues = function(values){
                that.el.val('');
                for(var i = 0; i < values.length; i++){
                    var option = that.el.find('option[value='+values[i].value+']');
                    option.prop('selected', true);
                }
            };
        };

        var Search = function(el) {
            var that = this;
            that.el = el;
        };

        var Icon = function(el) {
            var that = this;
            that.el = el;
            that.setValue = function(icon){
                that.el.innerHTML = '<img src="'+icon+'">';
            };
        };

        var Select = function(el) {
            var that = this;
            that.el = el;

            that.placeholder = that.el.text();

            that.getValues = function(){
                var values = [];
                var items =
                that.el.find('.item').each(function(){
                    var item = {text: $(this).text(), value: $(this).attr('data-value') || $(this).text()};
                    values.push({
                        text: $(this).text(),
                        value: $(this).attr('data-value') || $(this).text()
                    });
                });
                if(values.length == 0){
                    that.el.html(that.placeholder);
                }
                return values;
            };

            that.setValue = function(value){
                that.el.val(value.text);
                if(value.icon){
                    //that.el.parent().find('.icon').html('<img src="' + value.icon + '">');
                    //that.el.addClass('has-icon');
                }else{
                    that.el.parent().find('.icon').html('');
                    that.el.removeClass('has-icon');
                }
            };

            that.setValues = function(values){
                that.el.html('');
                for(var i = 0; i < values.length; i++){
                    var iconHtml = '';
                    if(values[i].icon){
                       iconHtml =  '<img class="icon" src="' + values[i].icon + '">';
                    }
                    that.el.append('<div data-value="'+values[i].value+'" class="item">'+iconHtml+values[i].text+'<i class="fa fa-times"></i></div>');
                }
            };
            
        };

        var Collection = function(el) {
            var that = this;
            that.el = el;

            that.list = $(that.el).find('ul');

            that.clear = function(){
                this.el.find('li').removeClass('selected active');
            };

            that.getValue = function(){
                var selected = that.el.find('li.selected');
                var icon = false;
                if(selected.find('.icon').length > 0){
                    icon = selected.find('.icon').attr('src')
                }
                return {
                    text: selected.text(),
                    value: selected.attr('data-value') || selected.text(),
                    icon: icon
                };
            };

            that.getValues = function(){
                var values = [];
                that.el.find('li.selected').each(function(){
                    var icon = false;
                    if($(this).find('.icon').length > 0){
                        icon = $(this).find('.icon').attr('src')
                    }
                    values.push({
                        text: $(this).text(),
                        value: $(this).attr('data-value') || $(this).text(),
                        icon: icon
                    });
                });
                return values;
            };

            that.setValue = function(value){
                that.clear();
                that.el.find('li').each(function(){
                    if($(this).attr('data-value') == value.value || $(this).text() == value.text){
                        $(this).addClass('selected active');
                    }
                });
            };

            that.setValues = function(values){
                that.clear();
                for(var i = 0; i < values.length; i++){
                    that.el.find('li').each(function(){
                        if($(this).attr('data-value') == values[i].value || $(this).text() == values[i].text){
                            $(this).addClass('selected active');
                        }
                    });
                }
            };

            that.isMultiple = function(){
                return that.el.hasClass('multiple');
            };

        };

        var init = function(el){

            var name = el.getAttribute('name') || "";
            var placeholder = el.getAttribute('placeholder') || "";
            var searchPlaceholder = el.getAttribute('data-search-placeholder') || 'Search...';
            var multiple = el.getAttribute('multiple') !== null ? true : false;
            var classes = el.className + ' dropdown-select dropdown';

            var collection = '';
            var options = el.getElementsByTagName('option');
            var selectedOptions = [];
            var icon = '';
            var iconHtml = '';

            $(el).find('option:selected').each(function(){
                selectedOptions.push(this.index);
            })

            for (var i = 0; i < options.length; i++) {
                var className = selectedOptions.indexOf(options[i].index) !== -1 ? 'selected' : '';
                if(options[i].getAttribute('data-icon')){
                    icon = '<img class="icon" src="'+options[i].getAttribute('data-icon')+'"/>';
                }
                collection += '<li data-value="'+options[i].value+'" class="'+className+'">'+icon+options[i].innerHTML+'</li>';
            }

            var template = document.createElement("DIV");
            if(el.id) template.id = el.id;
            template.className = classes;

            if(multiple){
                template.innerHTML = '<div class="select selection full">'+placeholder+'</div>' +
                    '<div class="collection multiple"><div class="input-icon"><input class="search" type="text" placeholder="'+searchPlaceholder+'"><i class="icon fa fa-search"></i></div>' +
                        '<ul>'+ collection +'</ul>' +
                    '</div>';
            }else{
                template.innerHTML = '<input class="select full" type="text" readonly placeholder="'+placeholder+'">' + '<div class="icon">' + iconHtml + '</div>' +
                    '<div class="collection"><div class="input-icon"><input class="search" type="text" placeholder="'+searchPlaceholder+'"><i class="icon fa fa-search"></i></div>' +
                        '<ul>'+ collection +'</ul>' +
                    '</div>';
            }
            $(el).hide();
            $(el).after(template);
            initSelect(template,el);
        };

        function initSelect (template,el) {

            var selectedData = null;
            var currenIndex = -1;

            var input = new Input($(el));
            var dropdown = new Dropdown($(template));
            var select = new Select($(template).find('.select'));
            var search = new Search($(template).find('.search'));
            var collection = new Collection($(template).find('.collection'));


            if(collection.isMultiple()){
                select.setValues(collection.getValues());
            }else{
                select.setValue(collection.getValue());
            }

            //actions

            //click select
            select.el.on('click', function() {
                if(dropdown.isVisible()){
                    dropdown.hide();
                }else{
                    dropdown.show();
                }
            });

            //searching
            search.el.on('keyup change', function() {
                var value = this.value;
                if (value.length > 0) {
                    collection.el.find('li').show().filter(function() {
                        return $(this).text().toLowerCase().indexOf(value.toLowerCase()) == -1;
                    }).hide();
                } else {
                    collection.el.find('li').show();
                }
            });

            //click on collection
            collection.el.on('click', 'li', function(event) {

                $(el).change();

                if(!collection.isMultiple()){
                    collection.clear();
                }
                currenIndex = collection.el.find('li').index($(this));

                if($(this).hasClass('active') || $(this).hasClass('selected')) {
                    $(this).removeClass('selected active');
                }else{
                    $(this).addClass('active selected');
                }

                if(collection.isMultiple()){
                    selectedData = collection.getValues();
                    select.setValues(selectedData);
                    input.setValues(selectedData);
                }else{
                    select.setValue(collection.getValue());
                    input.setValue(collection.getValue());
                }
            });

            //only for multiple
            select.el.on('click', '.item i', function(event){
                event.stopPropagation();
                $(this).parent().remove();

                selectedData = select.getValues();

                collection.clear();
                collection.setValues(selectedData);
                input.setValues(selectedData);

            });


        };

        for (var i = 0; i < that.length; i++) {
            init(that[i]);
        }

    };
})(jQuery);