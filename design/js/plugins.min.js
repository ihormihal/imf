(function($) {

	$.fn.imfGmapSingle = function(options) {

		var that = this;
		var settings = $.extend({
			point: false, //for single ("50.4503,30.5235")
			zoom: 5,
			scroll: false,
			type: 'ROADMAP',
			marker: 'design/img/pin.svg',
			animation: false
		}, options);

		$(that).each(function(index, container){
			var gmap = {};

			gmap.settings = {};

			//extend settings
			var thatData = $(container).data();
			for(var i in settings){
				if(thatData.hasOwnProperty(i)){
					gmap.settings[i] = thatData[i];
				}else{
					gmap.settings[i] = settings[i];
				}
			}

			var location = gmap.settings.point.split(',');
			gmap.latlng = new google.maps.LatLng(parseFloat(location[0].trim()), parseFloat(location[1].trim()));

			gmap.mapOptions = {
				center: gmap.latlng,
				zoom: parseInt(gmap.settings.zoom),
				zoomControl: true,
				mapTypeControl: false,
				streetViewControl: false,
				scrollwheel: gmap.settings.scroll,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			};

			gmap.map = new google.maps.Map(container, gmap.mapOptions);

			gmap.marker = new google.maps.Marker({
				position: gmap.latlng,
				map: gmap.map,
				icon: gmap.settings.marker
			});


		});

	};

	$.fn.imfGmapMultiple = function(options) {
		if(this.length == 0) return false;
		var that = this[0];
		var settings = $.extend({
			zoom: 5,
			scroll: false,
			type: 'ROADMAP',
			marker: 'design/img/pin.svg',
			animation: false,
			pointsUrl: false,
			windowUrl: false
		}, options);


		var gmap = {};

		gmap.points = [];
		gmap.markers = [];
		gmap.settings = {};

		//extend settings
		var thatData = $(that).data();
		for(var i in settings){
			if(thatData.hasOwnProperty(i)){
				gmap.settings[i] = thatData[i];
			}else{
				gmap.settings[i] = settings[i];
			}
		}

		gmap.mapOptions = {
			zoom: parseInt(gmap.settings.zoom),
			zoomControl: true,
			mapTypeControl: false,
			streetViewControl: false,
			scrollwheel: gmap.settings.scroll,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		};


		if(gmap.settings.type == 'SATELLITE'){
			gmap.mapOptions.mapTypeId = google.maps.MapTypeId.SATELLITE;
		}else if(gmap.settings.type == 'HYBRID'){
			gmap.mapOptions.mapTypeId = google.maps.MapTypeId.HYBRID;
		}else if(gmap.settings.type == 'TERRAIN'){
			gmap.mapOptions.mapTypeId = google.maps.MapTypeId.TERRAIN;
		}

		gmap.markerOptions = {
			position: null,
			map: null,
			icon: gmap.settings.marker,
			animation: (gmap.settings.animation ? google.maps.Animation.DROP : false)
		};
		
		gmap.loadPoints = function(url, data){
			$.ajax({
				url: url,
				data: data
			}).done(function(res){
				if(res.status == 'success'){
					gmap.points = res.data;
					gmap.placePoints();
				}
			});
		};

		//initial points
		if(gmap.settings.pointsUrl){
			gmap.loadPoints(gmap.settings.pointsUrl);
		}else if(gmap.settings.point){
			gmap.points = $.parseJSON($(that).html().trim());
		}

		gmap.map = new google.maps.Map(that, gmap.mapOptions);
		gmap.infowindow = new google.maps.InfoWindow();


		gmap.placePoints = function(){
			gmap.bounds = new google.maps.LatLngBounds();
			for(var i = 0; i < gmap.markers.length; i++){
				gmap.markers[i].setMap(null);
			}
			gmap.markers = [];
			for (var i = 0; i < gmap.points.length; i++) {
				if(gmap.points[i]){

					var options = gmap.markerOptions;
					options.position = new google.maps.LatLng(parseFloat(gmap.points[i].lat), parseFloat(gmap.points[i].lng));
					options.map = gmap.map;
					options.id = gmap.points[i].id;

					var marker = new google.maps.Marker(options);

					gmap.markers.push(marker);
					if(gmap.settings.windowUrl){
						google.maps.event.addListener(marker,'click',function(){
							loadInfoWindow(that);
						});
					}
					gmap.bounds.extend(marker.position);
				}
			}
			gmap.map.fitBounds(this.bounds);

			if(gmap.markers.length == 0){
				gmap.map.setZoom(1);
			}
			if(gmap.markers.length == 1){
				gmap.map.setZoom(gmap.mapOptions.zoom);
			}
		}

		gmap.placePoints();
		
		function loadInfoWindow(marker){
			$.ajax({
				url: gmap.settings.windowUrl,
				data: {id: marker.id}
			}).done(function(data){
				gmap.infowindow.close();
				gmap.infowindow.setContent(data);
				gmap.infowindow.open(gmap.map,marker);
			});
		}

		return gmap;


	};

})(jQuery);

/*
 * OWL-Carousel 2 wrapper
 * v0.1.1 - 2017-02-20
 * https://github.com/ihormihal/IM-Framework
 * http://mycode.in.ua
 * Copyright 2017 Ihor Mykhalchenko
 */

(function($) {

	$.fn.imfOwlCarousel = function(options){

		var settings = $.extend({
			type: 'carousel'
		}, options);


		$(this).each(function(){
			var el = $(this);
			var params = {
				loop: el.data('loop') == true ? true : false,
				nav : el.data('nav') == true ? true : false,
				dots: el.data('pag') == true ? true : false,
				autoplay: el.data('auto') == true ? true : false,
				slideBy: el.data('page') == true ? 'page' : 1,
				margin: el.data('margin') ? parseInt(el.data('margin')) : 0,
				autoplayTimeout: el.data('speed') ? parseInt(el.data('speed')) : 5000,
				navText: ['<i class="fa fa-angle-left">', '<i class="fa fa-angle-right">']
			};
			if(settings.type == 'carousel'){
				params.responsive = {
					0: { items: parseInt(el.data('xs')) || 1 },
					361: { items: parseInt(el.data('sm')) || 2 },
					769: { items: parseInt(el.data('md')) || 3 },
					1008: { items: parseInt(el.data('lg')) || 4 },
					1265: { items: parseInt(el.data('xl')) || 5 },
					1904: { items: parseInt(el.data('xxl')) || 5 }
				};
			}else if(settings.type == 'slider'){
				params.items = 1;
				el.on('translate.owl.carousel', function(event) {
					var currentIndex = event.item.index;
					var slides = el.find('.owl-item');
					slides.each(function(index){
						if(index !== event.item.index){
							$(this).find('.animated').each(function(){
								$(this).removeClass($(this).data('animated'));
							});
						}
					});
					slides.eq(currentIndex).find('.animated').each(function(){
						$(this).addClass($(this).data('animated'));
					});
				});
			}
			el.owlCarousel(params);
		});

		//OWL Carousel custom nav
		$('.owl-custom-nav').on('click', '.owl-prev, .owl-next', function(){
			var target = $(this).parent('.owl-custom-nav').data('target');
			var owl = $(target).data('owlCarousel');
			if($(this).hasClass('owl-prev')){
				owl.prev();
			}else if($(this).hasClass('owl-next')){
				owl.next();
			}
		});

	};

})(jQuery);
/*
 * Universal Single-Layer Parallax
 * parallax - v0.1.2 - 2016-10-20
 * https://github.com/ihormihal/IM-Framework
 * Ihor Mykhalchenko (http://mycode.in.ua)
 */


(function($) {
	
	$.fn.imfParallax = function(options){
		var settings = $.extend({
			speed: 0.8, // 0 -> 1 : slowly, 1 -> 2 : faster
			minWidth : 992
		}, options);

		var that = this;

		var needReload = true;

		var main = function(){

			$('.parallax-image').remove();

			if($(window).width() < settings.minWidth){
				$(that).each(function(index,element){
					var src = element.getAttribute('data-image');
					element.style.backgroundImage = 'url('+src+')';
				});
			}else{
				$(that).each(function(index,element){
					var item = {};
					element.style.backgroundImage = '';
					var thisSpeed = settings.speed;

					var src = element.getAttribute('data-image');
					var speed = element.getAttribute('data-speed');

					if(speed){
						speed = Math.abs(parseFloat(speed));
						if(speed > 2){
							console.log('Too mutch speed for parallax (use 0...2)!'); //default value used
						}else if(speed == 1){
							return false; //no sense run parallax
						}else{
							thisSpeed = speed;
						}
					}

					var prallaxHeight = element.offsetHeight; //container height
					var prallaxTop = $(element).offset().top; //page top -> container

					item.parallax = document.createElement('div');
					item.parallax.className = "parallax-image";
					item.parallax.style.height = prallaxHeight + 'px';

					item.image = document.createElement('img');
					item.image.src = src;

					item.parallax.appendChild(item.image);

					document.body.appendChild(item.parallax);


					var moveImage = function() {
						var scrTop = $(window).scrollTop(); //scrolling position document top -> window top
						var scrBottom = scrTop + $(window).innerHeight(); //scrolling position document top -> window bottom
						var origin = prallaxTop - scrTop;

						var originScroll = 'translate3d(0, '+ origin +'px, 0)';
						var parallaxScroll = 'translate3d(0, '+  parseInt(origin*(thisSpeed-1)) +'px, 0)';


						var topBorderVisible = false; //image top edge visibility
						var bottomBorderVisible = false; //image bottom edge visibility

						var fixOffset = 100; //scroll step in Chrome

						if(prallaxTop > (scrTop - fixOffset) && prallaxTop < (scrBottom + fixOffset)){
							topBorderVisible = true;
						}
						if(prallaxTop + prallaxHeight > (scrTop - fixOffset) && prallaxTop + prallaxHeight < (scrBottom + fixOffset)){
							bottomBorderVisible = true;
						}

						//run if only parallax is visible
						if(topBorderVisible || bottomBorderVisible || needReload){
							item.parallax.style.display = 'block';
							item.parallax.style.transform = originScroll;
							item.parallax.style['-webkit-transform'] = originScroll;
							item.image.style.transform = parallaxScroll;
							item.image.style['-webkit-transform'] = parallaxScroll;
						}else{
							item.parallax.style.display = 'none';
						}

					};

					moveImage();

					$(window).scroll(function() {
						moveImage();
					});
				});
			}

			needReload = false;
		};

		main();

		$(window).resize(function() {
			console.log('resize');
			needReload = true;
			main();
		});
	};

})(jQuery);
var cssTransitionEnd = 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd';
var cssAnimationEnd = 'webkitAnimationEnd oanimationend msAnimationEnd animationend';
var selector = '.ripple, .btn-mt';

(function($) {

	$(document).on('click', selector, function(event){
		var that, ink, d, x, y;
		that = $(this);
		if(that.find('.ink').length == 0){
			that.prepend('<span class="ink"></span>');
		}
		ink = that.find('.ink');
		ink.removeClass('animate');
		if(!ink.height() && !ink.width())
		{
			d = Math.max(that.outerWidth(), that.outerHeight());
			ink.css({height: d, width: d});
		}
		x = event.pageX - that.offset().left - ink.width()/2;
		y = event.pageY - that.offset().top - ink.height()/2;
		ink.css({top: y+'px', left: x+'px'}).addClass('animate');
		that.on(cssAnimationEnd, '.ink', function(){
			$(this).remove();
		});
	});

})(jQuery);
/*
 * Select autocomplete plugin
 * v0.2.1 - 2017-06-20
 * https://github.com/ihormihal/IM-Framework
 * http://mycode.in.ua
 * Copyright 2017 Ihor Mykhalchenko
 */

(function($) {
	$.fn.imfSelect = function(options){
		var settings = $.extend({

		}, options);

		//plain JS code
		var app = {
			//get options array from select
			getItems: function(el){
				var items = [];
				el.querySelectorAll('option').forEach(function(option, index){
					items.push({
						index: index,
						value: option.getAttribute('value'),
						text: option.textContent, //or innerHTML
						selected: option.selected ? true : false
					});
				});
				return items;
			},
			createComponent: function(items, placeholder, searchPlaceholder, inputClassName, isMultiple, showSearch){
				const element = document.createElement('DIV');
				element.className = "imf-select dropdown";

				//make collection
				var collectionContent = '';
				items.forEach(function(item){
					var className = item.selected ? 'active' : '';
					collectionContent += '<li data-index="'+item.index+'" data-value="'+item.value+'" class="'+className+'">'+item.text+'</li>';
				});

				var searchWrapper = '<div class="search-wrapper">'+
					'<div class="input-icon">'+
						'<input class="search mtr full" type="text" placeholder="'+searchPlaceholder+'">'+
						'<i class="icon light fa fa-search"></i>'+
					'</div>'+
				'</div>';

				//make popup content
				var popupContent = '<div class="popup full">'+(showSearch ? searchWrapper : '')+
					'<ul class="collection">'+ collectionContent +'</ul>' +
				'</div>';

				//make template
				var template = '';
				if(isMultiple){
					template = '<div class="select selection">'+placeholder+'</div>'+popupContent;
				}else{
					template = '<input class="control '+inputClassName+'" type="text" readonly placeholder="'+placeholder+'">'+popupContent;
				}

				element.innerHTML = template;

				return element;
			}
		}


		//init for each
		//jQuery code
		this.each(function(){
			const select = this;
			const options = {
				placeholder: select.getAttribute('placeholder') || '',
				searchPlaceholder: select.getAttribute('data-search-placeholder') || 'Search items',
				showSearch: select.getAttribute('data-show-search') == "false" ? false : true
			};

			const items = app.getItems(select); //initial state
			const component = app.createComponent(items, options.placeholder, options.searchPlaceholder, 'mtr full', select.multiple, options.showSearch);

			const collection = component.querySelector('.collection');
			const input = component.querySelector('input.control');
			const searchInput = component.querySelector('input.search');
			const selection = component.querySelector('.selection'); //for multiple

			//add classes
			if(selection){
				selection.className = 'select selection '+select.className;
			}else if(input){
				input.className = 'select control '+select.className;
			}


			//mount component html
			$(select).hide().after(component);

			// EVENTS

			//on select focus
			$(input).on('focus', function(){
				$(component).addClass('active'); //show popup
			});

			//for multiple
			$(selection).on('click', function(event){
				event.stopPropagation();
				$(component).addClass('active'); //show popup
			});

			//re-render list of selected
			function selectionMeltiple(){
				var selectionContent = '';
				select.value = '';
				for(var i = 0; i < items.length; i++){
					if(items[i].selected){
						selectionContent += '<div data-index="'+items[i].index+'" data-value="'+items[i].value+'">'+items[i].text+' <i class="x remove"></i></div>';
						select.querySelectorAll('option')[i].selected = true;
					}
				}
				if(selectionContent){
					selection.innerHTML = selectionContent;
				}else{
					selection.innerHTML = options.placeholder;
				}
			}

			//on item selected
			$(collection).on('click', 'li', function(){
				var index = $(this).data('index');

				if(select.multiple){
					items[index].selected = true;
					selectionMeltiple();
				}else{
					//model
					for(var i = 0; i < items.length; i++){
						items[i].selected = false;
					}
					items[index].selected = true;
					//view
					$(collection).find('li').removeClass('active');
					select.value = items[index].value;
					input.value = items[index].text;
				}

				$(this).addClass('active');

				$(component).removeClass('active'); //hide popup
			});

			$(selection).on('click', '.remove', function(event){
				event.stopPropagation();
				var index = $(this).parent().data('index');
				items[index].selected = false;
				selectionMeltiple();

				//deselect in collection
				collection.querySelectorAll('li')[index].className = '';
			});

			//on search input
			$(searchInput).on('keyup change', function() {
				var value = this.value;
				if (value.length > 0) {
					$(collection).find('li').show().filter(function() {
						return $(this).text().toLowerCase().indexOf(value.toLowerCase()) == -1;
					}).hide();
				} else {
					$(collection).find('li').show();
				}
			});

		});

	};
})(jQuery);